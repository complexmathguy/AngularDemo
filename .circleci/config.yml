version: 2.1

references:

working_directory: &working_directory
  /home/circleci/gitRoot/

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
        - *working_directory
  
base_terraform_image: &base_terraform_image
  hashicorp/terraform:0.11.14
  
terraform_config: &terraform_config
  docker:
    - image: *base_terraform_image
      environment:
          TERRAFORM_DIR: terraform
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      cd /home/circleci/gitRoot/terraform
      terraform init

jobs: 

  # core job
  build_test_project:

    # assign the working directory
    working_directory: *working_directory
        
    # run the steps with Docker as the primary container
    # job commands run in this container
    # CircleCI Node.js image
    # mongodb image - runs in a common network where ports exposed
    #          on the primary container are available on localhost
    docker:
      - image: circleci/node:10.9.0-jessie
      - image: mongo:4.0.5
        command: [mongod, --smallfiles]

    # steps that comprise the `build-env` job
    steps:

      # check out source code to working directory
      - checkout

      # restore the saved cache after the first run or if `pom.xml` has changed
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - *restore_repo

# install the Angular CLI
     # assign vars for Git
      - run: 'export EMAIL=circleci@circleci.com'
      - run: 'export GIT_AUTHOR_NAME=CircleCi'
      - run: 'export GIT_COMMITTER_NAME=CircleCi'
      
     # install the Angular CLI, pip to /dev/null to remove analytics invocation
      - run: 'sudo npm install -g @angular/cli@7.2.3 > /dev/null'

      # create an appRoot directory to install into 
      - run: mkdir /home/circleci/appRoot

      # create a new Angular project shell
      - run: cd /home/circleci/appRoot && ng new angular7demo --defaults

      # copy the application files from the working directory
      - run: cp -r -n /home/circleci/appRoot/angular7demo/ /home/circleci/gitRoot/

      # setup the application, copies generated app files to the project directory
      - run: cd /home/circleci/gitRoot/angular7demo && npm install --prod && npm run setup

      # perform the build into a directory called angular under the dist directory
      - run: cd /home/circleci/gitRoot/angular7demo && ng build #--base-href /angular7demo/
      

      # cache the entire project since it covers the npm_modules
      # and the files created during ng new
      - *save_repo
      
  docker_build:
    # assign the working directory
    working_directory: *working_directory

    docker: # run the steps with Docker
      - image: circleci/python:3.7  
      
    steps:
      - *restore_repo
      - setup_remote_docker
      - run:
          name: creating docker image requiring project env vars DOCKER_USER and DOCKER_PASS
          command: |
            docker login --username tylertravismya --password 69cutlass
            docker build -t realmethods/angular7demo:latest .
            docker push realmethods/angular7demo:latest

  terraform:
    <<: *terraform_config
    steps:
      - *restore_repo
      - *terraform_init
      - add_ssh_keys: # fingerprint is returned when the private SSH key is applied to this CircleCI project
          fingerprints:
            - "50:36:21:3f:3e:fd:de:fc:2f:1f:17:a6:09:6d:1b:dd"
      - run:
          name: terraform plan
          command: |
            cd /home/circleci/gitRoot/terraform
            terraform plan -out=terraform.plan -var aws-access-key=$USER_AWS_ACCESSKEY -var aws-secret-key=$USER_AWS_SECRETKEY
            terraform apply -auto-approve "terraform.plan"

# simple workflow to build out the environment
workflows:
  version: 2
  build_test_deploy_workflow:
    jobs:
      - build_test_project
      - docker_build:
          requires:
            - build_test_project
      - terraform:
          requires:
            - docker_build
